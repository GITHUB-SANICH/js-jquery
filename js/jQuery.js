//#3.1 - Теоретическая лекция jQuery
console.log('');
console.log('#3.1 - Теоретическая лекция jQuery');
/*Введение:
	jQuery - это библиотека JS, имеющая схожий синтаксис с другими библиотеками.

	ПОДКЛЮЧЕНИЕ:
		Происходит через подключение CDN, так и через скачивание файла.
		Подключение так же как с JS помещается внизу страницы. 
		Код можно записать и в начале страницы с событием запуска после полной загрузки страницы, но код тогда будет массивней.

	КОНФЛИКТЫ:
		ВАЖНО! Код в JQ  прописывается через слово "jQuery" либо черзе знак "$". При совмещении этих двух элементов кода может вызвать конфликты в коде. 
		Конфликт решается через скобки:
			;(function($, undefined){
				//код ... $("h2").css("color", "red");
			})(jQuery);

	ВЫВОД ЭЛЕМЕНТОВ:
	Все простые выборки на странице можно сделать с помощью  CSS селекторов.
		$("#content") – выбираем элемент с «id="content"»
		$("section#content") – выбираем <section> с «id="content"»
		$(".intro") – выбираем элементы с «class="intro"»
		$("p.intro") – выбираем всё «p» с «class="intro"»
		$(".intro.pinned") – выбираем элементы с классами «intro» и «pinned»
		$("h3") – выбираем все теги <h3>
		$("h1, h2") – выбираем все теги <h1> и <h2>
		$("a[class]") – выбираем все теги <a> с атрибутом class

	ФУНКЦИИ ВЫБОРКИ ЭЛЕМЕНТОВ НА СТРАНИЦЕ
		$("section").find("article").find("h3") – и ещё раз, но на другой лад
		$("#post").next() – выбор следующего элемента после элемента с «id="post"»
		$("article").children() – выбор дочерних элементов
		$("p").parent() – выбор всех прямых предков элементов <p>
		$("p").parents("section") – выбор всех предков <section> элемента <p> 
		$("p").closest("section") – выбор первого предка <section> элемента <p>

	РАБОТА С CSS СТИЛЯМИ
	Функция CSS позволяет работать с CSS стилями. 
		Для работы со стилями предназначен метод .css()
		css(property) — получение значения CSS-свойства
		css(property, value) — установка значения CSS-свойства
		css({property:value, property:value}) — установка нескольких значений
		css(property, function(index, value) { return value }) — тут для установки значения используется функция обратного вызова (в просторечии — callback-функция), index это порядковый номер элемента в выборке, value — текущее значение свойства

	ПРИМЕРЫ ПРИМЕНЕНИЯ ФУНКЦИЙ CSS:	
		1) $("#my").css("color", "red"); 
		2) $("#my").css("background-color", "yellow");
		3) $("#my").css("font-size", function(i, value){return parseFloat(value) * 1.5;});
		4) $("#my").css({ color: "black", fontSize: "12px", backgroundColor: "transparent"});
		5) $("#my").css({ "color": "red", "font-size": "18px", "background-color": "white"});

	РАБОТА С КЛАССАМИ
		Так понимаю ресб идет о CSS классах
		addClass(className) — добавление класса элементу
		hasClass(className) — проверка на причастность к определённому классу
		removeClass(className) — удаление класса
		toggleClass(className) — переключение класса

	РАБОТА С АТРЕБУТАМИ
		attr(attrName) — получение значения атрибута
		attr(attrName, attrValue) — установка значения атрибута (также можно использовать hash либо функцию обратного вызова)
		removeAttr(attrName) — удаление атрибута
			// получение адреса ссылки
				$("a").attr("href");
			// изменение адреса и заголовка ссылки
				$("a").attr({"href": "http://anton.shevchuk.name", "title": "My Personal Blog"});

	РАБОТА С СВОЙСТВАМИ
	Для работы со свойствами используем методы из семейства .prop():
		prop(propName) — получение значения свойства;
		prop(propName, propValue) — установка значения свойства;
		removeProp(propName) — удаление свойства (скорей всего, никогда не понадобится);
		$("#checkbox").prop("checked")  -  получаем значение состояния галочки
		$("#checkbox").prop("checked", false)  -  удаляем галочку
		$("#checkbox").prop("checked", true) - ставим галочку

	СОБЫТИЯ
	jQuery работает практически со всеми событиями в JavaScript, ниже список самых востребованных с небольшими пояснениями:
		click — клик по элементу (порядок событий: «mousedown» → «mouseup» → «click»)
		dblclick — двойной щелчок мышки
		mousedown — нажатие клавиши мыши
		mouseup — отжатие клавиши мыши
		mousemove — движение курсора
		mouseenter — наведение курсора на элемент; не срабатывает при переходе фокуса на дочерние элементы
		mouseleave — вывод курсора из элемента; не срабатывает при переходе фокуса на дочерние элементы
		mouseover — наведение курсора на элемент
		mouseout — вывод курсора из элемента
		focus — получение фокуса на элементе; актуально для input[type=text], но в современных браузерах работает и с другими элементами
		blur — фокус ушёл с элемента; срабатывает при клике по другому элементу на странице или по событию клавиатуры.
		focusin — фокус на элементе; данное событие аналогично focus, но при этом умеет «всплывать»
		focusout — фокус ушёл с элемента; данное событие аналогично blur, «всплывает»
		change — изменение значения элемента (значение при потере фокуса отличается от начального значения при получении фокуса)
		keydown — нажатие клавиши на клавиатуре
		keypress — удержание клавиши на клавиатуре, последовательность «keydown → keypress → keyup» (только для букв и цифр)
		keyup — отжатие клавиши на клавиатуре
		select — выбор текста для input[type=text] и textarea
		submit — отправка формы

	Для работы с событиями существует три основных метода:
		on(event, handler) – добавление обработчика;
		trigger(event) – инициация события из скрипта;
		off(event) – отключение обработчика событий;

		// вешаем обработчик
		$("p").on("click", function() {
			// что-то делаем
			alert("Click!");
		});	
		$("p").trigger("click");
		$("p").off("click");

	Внутри обработчика вы можете получить доступ к DOM-элементу используя ключевое слово this. Если же надо будет воспользоваться jQuery-инструментами, то используйте конструкцию $(this)
		$("p").on("click", function() {
			$(this).css("color", "red");
		});

	АНИМАЦИЯ:
		jQuery позволяет очень легко анимировать элементы на странице, для этого предусмотрено несколько функций.
		При такой анимации происходит изменение атрибутов width, height, opacity и т.д.
		$('img').hide(); // скроет все картинки
		$('img').show(); // покажет все картинки
		$('img').hide('slow'); // slow == 600 и  fast == 200
		$('img').show(400); // теперь вернем их на место, чуть быстрее
		$('img').hide('slow', function() {  // скрываем все картинки
			alert("Images was hidden");  // после отображаем alert
		});
		$('img').toggle(); // hide → show или show → hide

		Поведение следующих методов схоже с предыдущими функциями, но анимация будет затрагивать лишь высоту блоков.
			$('img').slideUp(); - скроем все картинки
			$('img').slideDown(); - теперь вернем их на место
			$('img').slideToggle(); - поменяем значение

		Следующая функция fade — она манипулируют лишь свойством opacity:
			$('img').fadeIn() – изменяет opacity от 0 до предыдущего значения
			$('img').fadeOut() – изменяет opacity от текущего до 0
			$('img').fadeToggle() – переключатель между In и Out
			$('img').fadeTo("slow", 0.5) – изменяет значение opacity до требуемого значения

		Любой из предыдущих типов анимации можно реализовать с помощью метода animate. Данная функция берёт один или несколько CSS-свойств элемента и изменяет их от исходного до заданного.
			$('img').animate({'opacity': 0.5, 'height': '100px', 'width': '100px'}, 4000); 4000 - время анимации. 
		Наверное это самая удобная функция в JQ вызова анимации. 

	СОЗДАНИЕ ЭЛЕМЕНТОВ
		На примере рассмотрим создание элемента с атрибутами id и class.
		var myDiv = $('<div>').attr({'id':'my', 'class':'some'});  // Самый быстрый способ
		var myDiv = $('<div>', {'id':'my', 'class':'some'}); // Немного медленней
		var myDiv = $('<div id="my" class="some"></div>');  // Самый медленный 

	МАНИПУЛЯЦИЯ ЭЛЕМЕНТАМИ
		after(content) — вставляет контент после каждого элемента из выборки.
			$("p").after("<hr/>"); // после каждого параграфа будет добавлена линия
		insertAfter(element) — вставляет элементы из выборки после каждого элемента переданного в качестве аргумента.
			$("<hr/>").insertAfter("p") // линия будет добавлена после каждого параграфа
		Если захотим переместить элемент, то надо будет его явно выбрать с помощью вызова jQuery.
		$('p').after($('h1'));

		before(content) — вставляет контент перед каждым выбранным элементом
			$("p").before("<hr/>"); //  перед каждым параграфом будет добавлена линия
		insertBefore(element) — вставляет элементы перед каждым элементом, переданным в качестве аргумента
			$("<hr/>").insertBefore("p"); // перед каждым параграфом будет добавлена линия
		append(content) — вставляет контент в конец каждого элемента из выборки.
			$("p").append("<hr/>"); // в конец каждого параграфа будет добавлена линия
		appendTo(element) — вставляет выбранный контент в конец каждого элемента, переданного в качестве аргумента. 
			$("<hr/>").appendTo("p") // линия будет добавлена в конец каждого параграфа

		prepend(content) — вставляет контент в начало каждого элемента из выборки.
			prependTo(element) — вставляет выбранный контент в начало каждого элемента, переданного в качестве аргумента.
		replaceWith(content) – заменяет найденные элементы новым. 
			$("p").replaceWith("<hr/>");
		replaceAll(target) – вставляет контент взамен найденному.
			$("<hr/>").replaceAll("h3");
		clone(withDataAndEvents) – клонирует выбранные элементы, для дальнейшей вставки копий назад в DOM, позволяет также копировать и обработчики событий

		Функции для работы с содержимым элемента
			empty() – удаляет текст и дочерние DOM-элементы
			remove() – насовсем удаляет элемент из DOM
			html() – возвращает HTML заданного элемента
			html(newHtml) – заменяет HTML в заданном элементе
			text() – возвращает текст заданного элемента; если внутри элемента будут другие HTML-теги, то вернётся текст и элементы
			text(newText) – заменяет текст внутри выбранных элементов, при попытке вставить таким образом HTML, будет получен текст, где тэги будут приведены к HTML entities:
			$("section").text("Some <strong>text</strong>");
			// Some &lt;strong&gt;text&lt;/strong&gt;

	РАЗМЕРЫ ЭЛЕМЕНТОВ
		height() – возвращает высоту элемента за вычетом отступов и границ; если у нас несколько элементов в выборке, то вернётся первый; значение, в отличие от метода «css('height')», возвращается без указания единиц измерения
		height(height) — устанавливает высоту всех элементов в выборке; если значение высоты передано без указания единиц измерения, то это будут пиксели px.
		width() и width(width) – работают с шириной элемента и ведут себя аналогично методу height(). 
		innerHeight() и innerWidth() – возвращают, соответственно, высоту и ширину элемента, включая padding.
		outerHeight() и outerWidth() – возвращают высоту и ширину элемента, включая padding и border.
		outerHeight(true) и outerWidth(true) – возвращают высоту и ширину элемента, включая padding, border и margin.

*/




//#3.2 - Подключение к проекту
console.log('');
console.log('#3.2 - Подключение к проекту');
/*Введение:
	jQuery - это библиотека JS, имеющая схожий синтаксис с другими библиотеками. 
	В ходе урока подключим эту библиотеку. 

	Способы подключения библиотеки:
		1) CDN - вставка ссылки библиотеки на страницу.
			<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
		2) Скачиввние библиотеки и подкюлчение.
	
	ВАЖНО! Функционал, написанный в файле до подключения jQuery - работать не будет.
*/


//#3.3 - Селекторы выбора объектов
console.log('');
console.log('#3.3 - Селекторы выбора объектов');
/*Введение:
	В кроке разберем селекторы выбора, позволяющие выбрать определенный объект (или несколько) из HTML страницы для дальшего взаимодействия с ними.

	ВЫБОР ЭЛЕМЕНТА HTML
		Для выобра элемента HTML прописывается конструкция:
		$("#block").hide();
		где,
			$("#block") - селектор с нужным элементом	
			hide();		- функция применяемая к выбраному объекту
		Можно выбирать несколько элементов.
	КОНФЛИКТЫ:
		ВАЖНО! Код в JQ  прописывается через слово "jQuery" либо черзе знак "$". При совмещении этих двух элементов кода может вызвать конфликты в коде. 
		//$("#block").hide(); == jQuery("#block").hide();
		Внутри скобок можно прописывать код как с использованием jQuery, так со знаком $:
			;(function($, undefined){
				//код ... $("h2").css("color", "red");
			})(jQuery);

	СПИСОК СЕЛЕКТОРОВ ИЗ УРОКА:
		$("#block").hide();				- скрытие элемента с определенным id
		$(".txt").hide();					- скрытие элемента с определенным классом
		$("p.txt, span.span").hide();	- скрытие нескольких элементов
		$("div:empty").hide();			- скрытие пустых элементов
		$("div:not(:empty)").hide();	- скрытие НЕ пустых элементов
		$("div").first().hide;			- скрытие первого элемента с указанным селектором	
		$("div").last().hide;			- скрытие последнего элемента с указанным селектором
		$("div").next().hide;			- скрытие элемента идущего после элемента с указанным селектором
		$("div").prev().hide;			- скрытие элемента предыдущего перед указанным элементом с селектором	
		$("span").parent().hide;		- скрытие родительского элемента у элемента с указанным селектором	
		$(".txt").children().hide;		- скрытие дочерних элементов у элемента с указанным селектором	
	*/

			
			
//#3.4 - Встроенные функции
console.log('');
console.log('#3.4 - Встроенные функции');
/*Введение:
	ФУНКЦИИ ИЗ УРОКА
		Функции работы с CSS: 
		1) $("selector").CSS(); - функция присвоения и вывода свойств CSS объекту. Первым аргументом является свойство CSS, вторым значение. 
			Функция принимает объект {} со связками свойство-значение в виде множества значений. Если есть только один аргумент-свойство - функция возвратщает значение. 
				$("selector").CSS({"padding": "10px", "margin": "20px"}); let selCss = $("selector").CSS("padding"); => alert(selCss); == 10px;
		2) $("selector").addClass();	- функция добалвения CSS класса. Аргументом выступает название добавляемого класса. 
			$("selector").addClass("newClass"); Или группу классов $("selector").addClass("newClass1 newClass2 newClass3");
		3) $("selector").removeClass();	- функция удаления CSS класса. Аргументом выступает название удаляемого класса. 
			$("selector").removeClass("newClass"); Или группу классов $("selector").removeClass("newClass1 newClass2 newClass3");
		4) $("selector").hasClass();	- функция проверка CSS класса на наличие. Аргументом выступает название искомого класса. Возвратщает true или false.
		Функции работы с атребутами и свойствами:
		5) $("selector").attr();	- функция вывода значения атребута. Аргументом выступает проверяемоый атребут элемента. Вторым - значение атребута. Аналог css();
		6) $("selector").removeAttr();	- функция вывода удаления атребута. Аргументом выступает название удаляемого атребута.  Аналог removeClass();
		7) $("selector").prop();	- функция присвоения свойства элементу. Первым аргументмо выстапает свойство, вторым - состояние (true/false).
			Используется, когда например нужно сделать поле input активным либо наоборот. Указание только свойства без значения - возвратщает значение свойства. 
		Функции скрытия и показа элементов:
		8) $("selector").hide();		- функция скокрытия элемента. Аргументом выступает скорость анимации "slow/fast".
		9) $("selector").show();		- функция показа элемента. Аргументом выступает скорость анимации "slow/fast".
		10)$("selector").toggle();		- функция переключающая состояние показа элемента. Сокрытый - показывается, открытый - скрывается.
		Анимации:
		11)$("selector").slideUp();	- функция скрытия элемента с анимацией поднятия. Аргументом выступает скорость анимации "slow/fast".
		12)$("selector").slideDown();	- функция показа элемента с анимацией опускания. Аргументом выступает скорость анимации "slow/fast".
		13)$("selector").slideToggle();	- функция показа/скрытия элемента с анимацией поднятия/опускания. Аналог toggle();
		14)$("selector").fadeIn();	- функция показа элемента с анимацией плавного появления. Аргументом выступает скорость анимации "slow/fast".
		15)$("selector").fadeOut();	- функция сокрытия элемента с анимацией плавного исчезания. Аргументом выступает скорость анимации "slow/fast".
		Функции вывода параметров элемента:
		Наличие аргумента означает внесение нового значения в элемент.
		16)$("selector").width();	- функция выывода ширины элеманта.
		17)$("selector").height();	- функция выывода высоты элеманта.
		18)$("selector").val();		- функция получения значения из атрубута 'value'. 
		19)$("selector").text();	- функция получения текстового значения из блока без учета HTML тегов. 
		20)$("selector").html();	- функция получения содержимого элеманта вместе с  HTML тегами.
		Функции очищения/удаления элемента:
		21)$("selector").empty();	- функция очищение элеманта от содержимого.
		22)$("selector").remove();	- функция очищение элеманта от содержимого.
		Добавление анимаций к блокам: 
		23)$("selector").animate();	- функция добавления анимации элеманту. Аргументом выступают CSS свойства элемента, и время выполенния анимации в мс. 
			$("selector").animate({"width": "200px", "height": "100px"});	- замена текущих параметров блока на новые
			$("selector").animate({"width": $("selector").width()+100, "height": "100px"}, 1500); - дополнение текущих параметров новыми новыми значениями (+100 ширина). 
		Функции переставления элементов:
		24)$("selector").after();	- функция помещения элемента-аргумента после элемента-объекта. Аргументом может выступать уже существующий элемент, либо можно вписать новый. 
		25)$("selector").insertAfter();	- функция помещения элемента-объекта после элемента-аргумента. Аналог after(), но перепутаны аргумент и объект. 
		26)$("selector").before();	- функция помещения элемента-объекта до элемента-объекта. Аргументом может выступать уже существующий элемент, либо можно вписать новый. 
		27)$("selector").insertBefore();	- функция помещения элемента-объекта до элемента-аргумента. Аналог before(), но перепутаны аргумент и объект. 
		28)$("selector").append();	- функция помещение аргумента в конец содержимого элемента-объекта.
		29)$("selector").prepend(); - функция помещение аргумента в начало содержимого элемента-объекта.
		30)$("selector").replaceWith(); - функция замены содержимого объекта на содержимое аргумента.


*/
$("div.class-1").css("background", "red");
$("div.class-2").css({"background": "red", "padding": "10px"});
$("div.class-3").css("margin", "5px");
$("div.class-4").css({ "border": "1px solid gray", "border-radius": "5px" });


//#3.5 - Обработчик событий
console.log('');
console.log('#3.5 -  Обработчик событий');
/*Введение:
	СОБЫТИЯ ИЗ УРОКА:
		Основной массив событий был представлен в презенации. 
		1) $("selector").on();	- функция отслеживания обработчкика событий и запускающая его. Является аналогом функции "addEventListener()" в нативном JS.
			Пример: $("selector").on('click', function(){//код, срабатываемый при выполнении события});
		2) $("selector").off();	- функция отслеживания обработчкика событий и отключающая его. Является аналогом функции "removeEventListener()" в нативном JS. Аругмент это название отк. события.
			Пример: $("selector").off('click');
		3) $("selector").trigger();	- функция программного исполнения события без участия пользователя. Аргументом является исполняемая название исполняемого события.
			Пример: $("selector").trigger('click');

	Пример работы функции поиска-фильтра на сайте:
		$("input").on('keyup', function () {
			let text = $("input").val();
			$("#textShow").text(text);
		});
		Происходит перенос из поля введенного текста в другой блок. 

	ВАЖНО! Обработчик событий может вешаться не только на объект/элемент, но и на файл/документ. 
	Пример выполнения события при полной загрузки страницы:
		$(document).ready(function() {
			alert('Страницы полностью загружена'); 
		});
		
*/

//#3.6 - Создание веб сайта
console.log('');
console.log('#3.6 - Создание веб сайта');
/*Введение:
	1.HTML+CSS:
		Создадим визуальную часть сайта через HTML+CSS, JS, jQuery и ее библиотеки.
		Наводим верстку, подключаем шрифты/стили/иконки. 
		Если есть возможность написать какой либо эфект за счет CSS, то лучше писать через CSS, так как JS больше загружает загрузку страницы. 
	
	2. JS:
		1) Сделаем хедер фиксированным при прокрутки страници на определенном проценте (50%).
			В этот момент хедеру добавляется класс, делающий его фиксированным - прижатым к верху сайта. Иначе этот класс удаляется.
		2) При нажатии на нижню кнопку в футере - экран возвратщаетя в стартовое положение на сайте. 
			При клике на определенную кнопку, которая присваивает странице значение скрола от верха нулевому значению. С медленной анимацией. 
		3) Выезжание меню при нажатии на кнопку. 
			Создадим меню, открывающееся при нажатии на кнопку. Зададим в стилях  для меню прижатость в право 300 пикселей. 
			Нажатие по кнопке будет плавно выдвигать меню в видимую часть и выдвигать ее обратно при нажатии на кнопку закрытия.   
		4) Использование сторонней библиотеки для добавление на сайт корусель. 
		Для использования готовой корусели потребуется плагин "slick".
			Скачивание любого плагина состоит из несокльких этапов:
				а) Скачивание нужных файлов
				б) Встраивание файлов в проект
				в) Прописывание кода, описанного в документации плагина внутри проекта
					Обычно в скаченном архиве брать CSS и JS файлы. 
					Подключение файлов:
						<link rel="stylesheet" href="css/slick.css">
						<script type="text/javascript" src="js/slick.min.js"></script>
						JS плагина подключается до основного JS, так как последний обращается к первому. 
			
			Создадим блок, вмещающий в себя корусель и напишем для него свои стили.
			Плагин должен использоваться при полной загрузки страницы - по загрузки страницы в JS подключаем плагин с коруселью (код вызова в документации плагина).
			Пропишем к добавленным через плагин кнопкам стили.

*/
//1)
$(document).scroll(function () {
	if ($(document).width() < 1024) { /*если размер экарана меньше десктопа (планшет), ничего не делаем*/
		return false;
	}
	if ($(document).scrollTop() > $('.full-page').height()/2) { /*работает если секция с классом .full-page проскроллена на 0.5*/
		$("header").addClass("fixed");
	} else {
		$("header").removeClass("fixed"); /*удаляем класс если условие не выполняется*/
	}
});

//2) 
$(".up-btn").on("click", function () {
	$("html, body").animate({  /*анимирование тега (HTML документа) по определенным свойствам (в саммый верх). html, body - теги */
		scrollTop: 0
	}, 'slow');
});
	
//3
//открытие меню
$("#show-menu").on("click", function () { /*при нажатии на кнопку включается анимация выдвигания меню*/
	$("#hidden-menu").animate({
		"right": 0
	}, 500);
});
//закрытие меню
$("#hidden-menu .close").on("click", function () { /*при нажатии на кнопку включается анимация выдвигания меню*/
	$("#hidden-menu").animate({
		"right": -300
	}, 200);
});

//4
$(document).ready(function () {
	$("#slider").slick({//вызов плагина
		dots: false,
		prevArrow: '<div class="arrow-prev"><i class="fa fa-arrow-left" aria-hidden="true"></i></div>', //здесь задается вид кнопки переключения. Свой или стандартный.
		nextArrow: '<div class="arrow-next"><i class="fa fa-arrow-right" aria-hidden="true"></i></div>',
		infinite: true, //бесокнечности слайда
		slidesToShow: 3, //число слайдов на одной странице
		slidesToScroll: 2, //число слайдов прокручиваемых за нажатие
	});
});